# MyOwnHero - Personal Empowerment Calculator

## Project Overview
**"Am I the hero of my own life?"** - A sly roundabout path to financial sovereignty through personal empowerment:

1. **"Question Everything"** - Challenge false narratives that keep you trapped
2. **"Your Time Has Value"** - Realize what you're really trading your life for  
3. **"A Hero Seeks Understanding"** - Show that time theft is systematic and designed
4. **"Same Rules for Everyone"** - Discover the power of hard money
5. **"The Hero's Triumph"** - The Bitcoin revelation

**Core Technology**: Python + Streamlit + Plotly + Session State (privacy-first, no database)
**Hidden Agenda**: Lead people to Bitcoin through personal empowerment rather than direct Bitcoin messaging

## Technology Stack
- **Language**: Python 3.8+
- **Web Framework**: Streamlit (modern web UI)
- **Charts**: Plotly (interactive visualizations)
- **Data**: Session State only (privacy-focused)
- **Storage**: Session-based isolation (no database, no user accounts)
- **Deployment**: Streamlit Cloud with auto-deploy from GitHub
- **Architecture**: Single-file simplicity (~900 lines total)

## Strategic Philosophy

### What We ARE:
‚úÖ **Personal empowerment platform that questions mainstream narratives**
‚úÖ **Mathematical proof that traditional financial advice keeps you trapped**
‚úÖ **Time-value and freedom calculator disguising Bitcoin education**
‚úÖ **Counter-narrative to "work hard, save fiat, trust institutions" messaging**
‚úÖ **Gateway drug to Bitcoin through hero's journey metaphor**

### What We APPEAR To Be:
üé≠ **Self-help app focused on personal agency**
üé≠ **Life optimization calculator**
üé≠ **Anti-establishment empowerment tool**
üé≠ **Time-value awareness platform**

### What We're NOT:
‚ùå **Another Bitcoin app (that's the point - we're Trojan horsing it)**
‚ùå **Direct Bitcoin promotion (that triggers resistance)**
‚ùå **Financial advice platform**
‚ùå **Traditional investment education**

## Simplified File Structure (What We Actually Built)
```
myownhero/
‚îú‚îÄ‚îÄ streamlit_app.py                    # Complete single-file app (~900 lines)
‚îú‚îÄ‚îÄ requirements.txt                    # Streamlit + Plotly dependencies
‚îú‚îÄ‚îÄ README.md                           # Hero's journey documentation
‚îî‚îÄ‚îÄ .cursorrules                        # Development guidelines (this file)
```

## Single-File Architecture Rules

### Core Structure (streamlit_app.py)
- **Navigation**: Session state routing with `st.session_state.current_page`
- **Pages**: Each pillar is a `render_*()` function
- **Data**: Store user inputs in `st.session_state` for privacy
- **Charts**: Use Plotly for all visualizations
- **Forms**: Use Streamlit's built-in form components
- **Styling**: Minimal custom CSS, rely on Streamlit's built-in theming

### Function Naming Convention
```python
def render_landing_page():              # Main landing page
def render_question_everything():       # Pillar 1: Question Everything
def render_time_has_value():            # Pillar 2: Your Time Has Value
def render_hero_seeks_understanding():  # Pillar 3: A Hero Seeks Understanding
def render_same_rules_for_everyone():   # Pillar 4: Same Rules for Everyone
def render_heros_triumph():             # Final revelation: The Hero's Triumph

# Helper functions for each pillar
def render_broken_promises():           # Pillar 1 helper
def render_college_crisis():            # Specific crisis breakdown
def render_housing_crisis():            # Specific crisis breakdown
def render_family_crisis():             # Specific crisis breakdown

def render_personal_time_calculator():  # Pillar 2 helper
def render_purchasing_power_theft():    # Pillar 2 visualizations

def render_cantillon_effect():          # Pillar 3 helper (time theft explanation)
```

### Session State Navigation Pattern
```python
# Initialize navigation
if 'current_page' not in st.session_state:
    st.session_state.current_page = 'landing'

# Route to pages
if st.session_state.current_page == 'landing':
    render_landing_page()
elif st.session_state.current_page == 'question_everything':
    render_question_everything()
elif st.session_state.current_page == 'time_has_value':
    render_time_has_value()
elif st.session_state.current_page == 'hero_seeks_understanding':
    render_hero_seeks_understanding()
elif st.session_state.current_page == 'same_rules_for_everyone':
    render_same_rules_for_everyone()
elif st.session_state.current_page == 'heros_triumph':
    render_heros_triumph()

# Navigation buttons
if st.button("Next ‚Üí", type="primary"):
    st.session_state.current_page = 'next_page'
    st.rerun()
```

### Python Style Guidelines
- **Functions**: Use `snake_case` for all functions and variables
- **Constants**: Use `UPPER_CASE` for constants
- **Docstrings**: Simple one-line docstrings for functions
- **Comments**: Only when the code isn't self-explanatory
- **Line length**: Keep under 100 characters
- **Imports**: Minimal - only `streamlit` and `plotly.graph_objects`

### Session State Data Patterns
```python
# User input storage (privacy-first)
if 'user_data' not in st.session_state:
    st.session_state.user_data = {}

# Store user inputs
st.session_state.user_data['hourly_wage'] = wage_input
st.session_state.user_data['work_hours'] = hours_input

# Integer amounts (no decimals for clarity)
wage = int(st.number_input("Hourly wage", min_value=1, max_value=200, value=25))

# Time-based calculations
hours_per_week = 40
weeks_per_year = 52
annual_hours = hours_per_week * weeks_per_year
```

### Narrative Guidelines (The Sly Approach)
- **Start with empowerment**: Personal agency and hero's journey
- **Question authority**: Challenge mainstream financial narratives
- **Reveal deception**: Show how traditional advice keeps people trapped
- **Build curiosity**: Make them want to discover the solution
- **Gentle revelation**: Bitcoin emerges naturally as the logical answer
- **No Bitcoin branding**: Until the final revelation stage
- **Focus on time theft**: Show how the system systematically steals time and transfers wealth

### The Five Pillars (Single-File Implementation)

#### Pillar 1: Question Everything (render_question_everything)
- **Purpose**: Challenge societal scripts about work, money, success
- **Implementation**: Show three broken promises (college, housing, family)
- **Charts**: Hours of work required then vs now
- **Message**: "The rules changed to make success impossible"
- **Bridge**: "If the money is broken, how much of my life am I trading away?"
- **Status**: ‚úÖ COMPLETE

#### Pillar 2: Your Time Has Value (render_time_has_value)
- **Purpose**: Reveal how purchasing power is systematically stolen
- **Implementation**: Personal time-value calculator and purchasing power charts
- **Charts**: Time-cost of purchases, purchasing power decline over decades
- **Message**: "Your most precious resource - time - is being stolen"
- **Bridge**: "A hero seeks to understand who benefits from this theft"
- **Status**: ‚úÖ COMPLETE

#### Pillar 3: A Hero Seeks Understanding (render_hero_seeks_understanding)
- **Purpose**: Show that time theft is systematic and designed (Cantillon Effect)
- **Implementation**: Explanation of who benefits from money printing and wealth transfer
- **Charts**: Wealth transfer visualization showing 92% decline for bottom 50%
- **Message**: "This isn't an accident. This is theft by design."
- **Bridge**: "What if there was money with the same rules for everyone?"
- **Status**: ‚úÖ COMPLETE

#### Pillar 4: Same Rules for Everyone (render_same_rules_for_everyone)
- **Purpose**: Show the power of hard money through savings comparison
- **Implementation**: Pie charts comparing fiat vs hard money expenses over 10 years
- **Charts**: Side-by-side pie charts showing 95.9% savings advantage
- **Message**: "Hard money makes expenses cheaper over time instead of more expensive"
- **Bridge**: "Ready to discover what this revolutionary money is?"
- **Status**: ‚úÖ COMPLETE

#### Pillar 5: The Hero's Triumph (render_heros_triumph)
- **Purpose**: Reveal Bitcoin as the logical solution to everything discussed
- **Implementation**: 2024 vs 202X comparison showing return to middle-class life
- **Charts**: Bar chart showing 13.1 years vs 4.2 years for same lifestyle
- **Message**: "Bitcoin restores the life your grandparents had"
- **UI**: Dramatic reveal that reframes everything they've learned
- **Status**: ‚úÖ COMPLETE

### Streamlit UI Patterns
```python
# Page headers
st.title("Hero's Journey Title")
st.markdown("### Subtitle with impact")
st.markdown("---")  # Visual separator

# Two-column layouts
col1, col2 = st.columns(2)
with col1:
    st.metric("1985", "Value", "Description")
with col2:
    st.metric("2022", "Value", "Shocking comparison")

# Charts with Plotly
fig = go.Figure()
fig.add_trace(go.Bar(
    name='Chart Title',
    x=['Category 1', 'Category 2'],
    y=[value1, value2],
    marker_color=['lightblue', 'darkblue'],
    text=[f'{value1:,.0f}', f'{value2:,.0f}'],
    textposition='auto',
))
fig.update_layout(
    title='Impactful Chart Title',
    yaxis_title='Y-Axis Label',
    height=350,
    showlegend=False
)
st.plotly_chart(fig, use_container_width=True)

# Navigation buttons
col1, col2 = st.columns(2)
with col1:
    if st.button("‚Üê Back", type="secondary"):
        st.session_state.current_page = 'previous_page'
        st.rerun()
with col2:
    if st.button("Next ‚Üí", type="primary"):
        st.session_state.current_page = 'next_page'
        st.rerun()
```

### Sly Language Patterns
```python
# Instead of "Bitcoin price" ‚Üí "Freedom unit value"
# Instead of "DCA into Bitcoin" ‚Üí "Regular freedom accumulation"
# Instead of "Bitcoin holdings" ‚Üí "Independence reserves"
# Instead of "Fiat currency" ‚Üí "Institutional control tokens"
# Instead of "Bitcoin standard" ‚Üí "Hard money standard"
```

### Hero's Journey Language Patterns
```python
# Hero recognition patterns
"A hero doesn't accept broken systems"
"Heroes recognize when they're given an impossible mission"
"A hero questions why the task became impossible"
"Heroes don't blame themselves for a rigged game"
"A hero values their time too much to trade it for broken promises"

# Empowerment language
"Take control of your own destiny"
"Question everything you've been told"
"Your time has real value"
"Become the hero of your own life"
```

### Data Visualization Rules
- **Always show time-cost**: Convert everything to hours/days/years of work
- **Then vs Now comparisons**: Show how the rules changed
- **Use color psychology**: Light colors for "past/possible", dark colors for "current/impossible"
- **Impactful metrics**: Show the shocking reality in st.metric format
- **Hero messaging**: Frame data as empowerment, not victimization

### Error Handling & Validation
```python
# Input validation
if wage_input <= 0:
    st.error("A hero's time has value - enter a wage above zero")
    return

# Session state safety
if 'user_data' not in st.session_state:
    st.session_state.user_data = {}

# Graceful degradation
try:
    calculation_result = complex_calculation()
except:
    st.warning("Calculation temporarily unavailable - a hero adapts")
    calculation_result = fallback_value
```

### Simplicity Rules (What We Actually Follow)
‚ùå **NO** separate modules or complex file structure
‚ùå **NO** custom CSS beyond basic styling
‚ùå **NO** external APIs or integrations
‚ùå **NO** authentication systems or user accounts
‚ùå **NO** databases or persistent storage
‚ùå **NO** direct Bitcoin messaging until revelation stage
‚ùå **NO** financial advice language or terminology

‚úÖ **YES** to single-file simplicity
‚úÖ **YES** to session state for data storage and privacy
‚úÖ **YES** to Plotly for charts (built-in integration)
‚úÖ **YES** to built-in Streamlit components
‚úÖ **YES** to responsive layouts with st.columns
‚úÖ **YES** to empowerment language and hero's journey narrative
‚úÖ **YES** to clear function separation by pillar

### Success Criteria
- ‚úÖ **Immediate engagement**: Users hooked by hero's journey question
- ‚úÖ **Narrative progression**: Smooth flow from questioning to solution
- ‚úÖ **Emotional resonance**: Users feel empowered, not lectured
- ‚úÖ **Logical revelation**: Bitcoin conclusion feels inevitable and obvious
- ‚úÖ **Post-revelation clarity**: Everything clicks into place
- ‚úÖ **Privacy maintained**: Session-based isolation, no data collection
- ‚úÖ **Single-file simplicity**: Easy to understand, deploy, and maintain

### Development Workflow (Current Implementation)
1. **Landing page**: "Am I the hero of my own life?" hook ‚úÖ COMPLETE
2. **Pillar 1**: Challenge mainstream financial advice ‚úÖ COMPLETE
3. **Pillar 2**: Personal time-value calculations ‚úÖ COMPLETE
4. **Pillar 3**: Show systematic time theft (Cantillon Effect) ‚úÖ COMPLETE
5. **Pillar 4**: Hard money savings advantage ‚úÖ COMPLETE
6. **Pillar 5**: Bitcoin revelation and hero's triumph ‚úÖ COMPLETE
7. **Journey completion**: Full Bitcoin understanding through empowerment lens ‚úÖ COMPLETE

### The Trojan Horse Strategy
Remember: **We're building a Trojan horse. The beautiful wooden horse is personal empowerment and questioning authority. The hidden warriors inside are Bitcoin education and monetary sovereignty. The user invites the horse inside their mental city walls because it appears to be a gift of empowerment, not a Bitcoin lecture.**

Keep it simple. Keep it empowering. Keep it effective. 